@page
@model IndexModel
@{
    ViewData["Title"] = "Claude Code Remote Manager";
}

<div class="min-h-screen bg-gradient-to-br from-slate-100 to-slate-200">
    <!-- Header -->
    <div class="bg-white shadow-sm border-b">
        <div class="px-2 py-1">
            <div class="flex items-center justify-between">
                <h1 class="text-sm font-bold text-slate-800">
                    <span class="text-blue-600">Claude</span> Code <span class="text-yellow-600">Remote</span> Manager
                </h1>
                <div class="flex items-center space-x-1">
                    <div id="access-mode" class="px-1 py-0.5 rounded text-xs font-medium"></div>
                    <button onclick="refreshStatus()" 
                            id="refresh-btn"
                            class="p-1 bg-slate-600 hover:bg-slate-700 text-white rounded text-xs transition-colors">
                        <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                        </svg>
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Main Content -->
    <div class="px-2 py-2">
        <div class="grid grid-cols-1 gap-2">
            @for (int i = 1; i <= 5; i++)
            {
                <div class="bg-white rounded border border-slate-200 overflow-hidden">
                    <!-- Terminal Header -->
                    <div class="bg-slate-50 px-2 py-1 border-b border-slate-200">
                        <div class="flex items-center justify-between">
                            <h2 class="text-xs font-semibold text-slate-800">T@(i)</h2>
                            <div class="flex items-center space-x-1">
                                <div class="w-1 h-1 rounded-full" id="indicator-@i"></div>
                                <span id="status-@i" class="text-xs font-medium"></span>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Terminal Body -->
                    <div class="p-2">
                        <!-- Status Info -->
                        <div class="mb-2 p-1 rounded" id="status-card-@i">
                            <div class="text-xs text-slate-600">Port</div>
                            <div class="font-mono text-xs font-bold" id="port-@i">@(7680 + i)</div>
                        </div>
                        
                        <!-- Action Buttons -->
                        <div class="space-y-3 max-w-32 mx-auto">
                            <button id="start-btn-@i" 
                                    onclick="startTerminal(@i)" 
                                    class="w-full flex items-center justify-center px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded text-base font-medium transition-colors disabled:opacity-50 disabled:cursor-not-allowed">
                                <span>起動</span>
                            </button>
                            
                            <button id="connect-btn-@i" 
                                    onclick="connectTerminal(@i)" 
                                    class="w-full flex items-center justify-center px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded text-base font-medium transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                                    disabled>
                                <span>接続</span>
                            </button>
                            
                            <button id="stop-btn-@i" 
                                    onclick="stopTerminal(@i)" 
                                    class="w-full flex items-center justify-center px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded text-base font-medium transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                                    disabled>
                                <span>停止</span>
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<script>
    let terminals = {};

    async function makeRequest(action, terminalNumber = 0) {
        try {
            const response = await fetch('/api/terminal', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    action: action,
                    terminalNumber: terminalNumber
                })
            });
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const text = await response.text();
            if (!text) {
                return { success: false, message: 'Empty response from server' };
            }
            
            try {
                return JSON.parse(text);
            } catch (parseError) {
                console.error('JSON parse error:', parseError, 'Response text:', text);
                return { success: false, message: 'Invalid response format' };
            }
        } catch (error) {
            console.error('Request failed:', error);
            return { success: false, message: `Request failed: ${error.message}` };
        }
    }

    async function startTerminal(number) {
        const buttonId = `start-btn-${number}`;
        setButtonLoading(buttonId, true);
        
        try {
            const result = await makeRequest('start', number);
            if (result.success) {
                updateTerminalStatus(number, true);
                showToast(`Terminal ${number} が正常に起動しました`, 'success');
            } else {
                showToast(`起動に失敗しました: ${result.message}`, 'error');
            }
        } catch (error) {
            showToast('通信エラーが発生しました', 'error');
        } finally {
            setButtonLoading(buttonId, false);
        }
    }

    async function stopTerminal(number) {
        const buttonId = `stop-btn-${number}`;
        setButtonLoading(buttonId, true);
        
        try {
            const result = await makeRequest('stop', number);
            if (result.success) {
                updateTerminalStatus(number, false);
                showToast(`Terminal ${number} を停止しました`, 'success');
            } else {
                showToast(`停止に失敗しました: ${result.message}`, 'error');
            }
        } catch (error) {
            showToast('通信エラーが発生しました', 'error');
        } finally {
            setButtonLoading(buttonId, false);
        }
    }

    function connectTerminal(number) {
        const port = 7680 + number;
        const hostname = window.location.hostname;
        const protocol = window.location.protocol;
        
        let targetUrl;
        
        // ローカルアクセス（localhost）の場合
        if (hostname === 'localhost' || hostname === '127.0.0.1') {
            targetUrl = `http://localhost:${port}`;
        } else {
            // リモートアクセス（Tailscale）の場合
            targetUrl = `${protocol}//${hostname}:${port}`;
        }
        
        console.log(`Connecting to terminal ${number}: ${targetUrl}`);
        window.open(targetUrl, '_blank');
    }

    async function refreshStatus() {
        const result = await makeRequest('status');
        if (result.success && result.terminals) {
            result.terminals.forEach(terminal => {
                updateTerminalStatus(terminal.number, terminal.isRunning);
            });
        } else {
            // サーバーに接続できない場合、全てのターミナルを停止状態として表示
            for (let i = 1; i <= 5; i++) {
                updateTerminalStatus(i, false);
            }
            // エラーメッセージを表示（初回は表示しない）
            if (result.message && !result.message.includes('server application is running')) {
                console.warn('Status refresh failed:', result.message);
            }
        }
    }

    function updateTerminalStatus(number, isRunning) {
        const statusEl = document.getElementById(`status-${number}`);
        const indicatorEl = document.getElementById(`indicator-${number}`);
        const statusCardEl = document.getElementById(`status-card-${number}`);
        const portEl = document.getElementById(`port-${number}`);
        const startBtn = document.getElementById(`start-btn-${number}`);
        const connectBtn = document.getElementById(`connect-btn-${number}`);
        const stopBtn = document.getElementById(`stop-btn-${number}`);

        if (isRunning) {
            // Status text and indicator
            statusEl.textContent = 'オンライン';
            statusEl.className = 'text-xs font-medium uppercase tracking-wider text-emerald-600';
            indicatorEl.className = 'w-2 h-2 rounded-full bg-emerald-400 animate-pulse';
            
            // Status card
            statusCardEl.className = 'mb-4 p-3 rounded-lg bg-emerald-50 border border-emerald-200';
            portEl.className = 'font-mono text-lg font-bold text-emerald-700';
            
            // Buttons
            startBtn.disabled = true;
            startBtn.className = 'w-full flex items-center justify-center px-4 py-2 bg-slate-300 text-slate-500 rounded text-base font-medium cursor-not-allowed opacity-50';
            
            connectBtn.disabled = false;
            connectBtn.className = 'w-full flex items-center justify-center px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded text-base font-medium transition-colors';
            
            stopBtn.disabled = false;
            stopBtn.className = 'w-full flex items-center justify-center px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded text-base font-medium transition-colors';
        } else {
            // Status text and indicator
            statusEl.textContent = 'オフライン';
            statusEl.className = 'text-xs font-medium uppercase tracking-wider text-slate-500';
            indicatorEl.className = 'w-2 h-2 rounded-full bg-slate-300';
            
            // Status card
            statusCardEl.className = 'mb-4 p-3 rounded-lg bg-slate-50 border border-slate-200';
            portEl.className = 'font-mono text-lg font-bold text-slate-600';
            
            // Buttons
            startBtn.disabled = false;
            startBtn.className = 'w-full flex items-center justify-center px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded text-base font-medium transition-colors';
            
            connectBtn.disabled = true;
            connectBtn.className = 'w-full flex items-center justify-center px-4 py-2 bg-slate-300 text-slate-500 rounded text-base font-medium cursor-not-allowed opacity-50';
            
            stopBtn.disabled = true;
            stopBtn.className = 'w-full flex items-center justify-center px-4 py-2 bg-slate-300 text-slate-500 rounded text-base font-medium cursor-not-allowed opacity-50';
        }
    }

    function updateAccessMode() {
        const hostname = window.location.hostname;
        const accessModeEl = document.getElementById('access-mode');
        
        if (hostname === 'localhost' || hostname === '127.0.0.1') {
            accessModeEl.textContent = 'ローカル';
            accessModeEl.className = 'px-3 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-700 border border-blue-200';
        } else {
            accessModeEl.textContent = 'リモート';
            accessModeEl.className = 'px-3 py-1 rounded-full text-xs font-medium bg-emerald-100 text-emerald-700 border border-emerald-200';
        }
    }

    function setButtonLoading(buttonId, isLoading) {
        const button = document.getElementById(buttonId);
        if (!button) return;
        
        if (isLoading) {
            button.disabled = true;
            const originalContent = button.innerHTML;
            button.dataset.originalContent = originalContent;
            button.innerHTML = `<span>処理中...</span>`;
        } else {
            button.disabled = false;
            if (button.dataset.originalContent) {
                button.innerHTML = button.dataset.originalContent;
                delete button.dataset.originalContent;
            }
        }
    }

    function showToast(message, type = 'info') {
        const toast = document.createElement('div');
        toast.className = `fixed top-4 right-4 px-6 py-4 rounded-lg shadow-lg z-50 transform transition-all duration-300 translate-x-full ${
            type === 'success' ? 'bg-emerald-500 text-white' :
            type === 'error' ? 'bg-red-500 text-white' :
            'bg-blue-500 text-white'
        }`;
        toast.textContent = message;
        
        document.body.appendChild(toast);
        
        // Animate in
        setTimeout(() => {
            toast.classList.remove('translate-x-full');
        }, 100);
        
        // Remove after 3 seconds
        setTimeout(() => {
            toast.classList.add('translate-x-full');
            setTimeout(() => {
                document.body.removeChild(toast);
            }, 300);
        }, 3000);
    }

    // ページ読み込み時に状態を更新
    document.addEventListener('DOMContentLoaded', function() {
        updateAccessMode();
        refreshStatus();
        // 5秒ごとに状態を自動更新
        setInterval(refreshStatus, 5000);
    });
</script>
